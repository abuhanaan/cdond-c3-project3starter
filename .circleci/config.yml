version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
        default: ""
    steps:
      - run:
          name: Destroy environments
          # Rollbacks cloudformation stacks when something goes wrong
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
        default: ""  
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl https://kvdb.io/VLDoJ5C1N6LKU3cdy7p7Ww/migration_${CIRCLE_WORKFLOW_ID:0:7} --insecure)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi
            
jobs:
  print_hello_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Hello World Test
          command: |
            echo hello-world!
            exit 1
      - slack/notify:
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1
            
      

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
            #  exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      # Your job code here
      - run:
          name: Front-End Test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      # Your job code here
      - run: 
          name: Back-End Test
          command: |
            cd backend
            npm install
            npm run test
    
          
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-scan]
      # Your job code here
      - run:
          name: Analyze Frontend
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
            
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-scan]
      # Your job code here
      - run:
          name: Analyze Backend
          command: |
            cd backend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:2.0.30
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople  
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeoplefront \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here 
            touch ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: $CIRCLE_WORKFLOW_ID

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      # - image: alpine:3.12.0
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      - run: python --version
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "ec:bb:29:bd:53:0c:c0:06:69:89:8b:99:8e:89:f1:3d"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            # apk add --update tar gzip
            sudo apt update
            sudo apt install tar gzip
      # - run:
      #     name: Install Python
      #     command: |
      #       # Your code here
      #       apk add --update python3
      - run:
          name: Install Ansible
          command: |
            # Your code here
            # apk add --update ansible
            pip3 install ansible
      - run:
          name: Install aws-cli
          command: |
            # Your code here
            # apk add --no-cache aws-cli
            pip3 install awscli
            # exit 1 
      - run:
          name: Configure server
          command: |
            # Your code here
            printenv | grep TYPEORM_
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
            # exit 1
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: $CIRCLE_WORKFLOW_ID

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            # exit 1
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/LVVucDJvxnbBCNCayA9aUJ/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1' --insecure
            fi
            # exit 1
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
            workflow_id: $CIRCLE_WORKFLOW_ID     

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      - run: python --version
      - run:
          name: Install Utilities
          command: |
            # your code here
            sudo apt update
            sudo apt install tar gzip
      - run: 
          name: Install Node
          command: |
            sudo apt-get install curl
            cd ~
            curl -sL https://deb.nodesource.com/setup_14.x -o /tmp/nodesource_setup.sh
            sudo bash /tmp/nodesource_setup.sh
            sudo apt install nodejs
      - run: node --version
      - run: npm --version
      - run:
          name: Install Ansible
          command: |
            # your code here
            pip install ansible
      - run:
          name: Install AWS CLI
          command: |
            # your code here
            pip install awscli
      - run:
          name: Get backend url for the frontend deployment
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
            workflow_id: $CIRCLE_WORKFLOW_ID

                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      - run: python --version
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "ec:bb:29:bd:53:0c:c0:06:69:89:8b:99:8e:89:f1:3d"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          # Install dependencies
          name: Install dependencies - tar utilities
          command: |
            # Your code here
            sudo apt update
            sudo apt install tar gzip
      - run:
          name: Install Ansible
          command: |
            # Your code here
            pip3 install ansible
      - run:
          name: Install aws-cli
          command: |
            # Your code here
            pip3 install awscli
      - run: 
          name: Install Node
          command: |
            # sudo apt-get install curl
            # cd ~
            # curl -sL https://deb.nodesource.com/setup_14.x -o /tmp/nodesource_setup.sh
            # sudo bash /tmp/nodesource_setup.sh
            sudo apt update
            sudo apt install nodejs
            sudo apt install npm
      - run: node --version
      - run: npm --version
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm install
            npm run build
            cd ..
            # Zip directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
            workflow_id: $CIRCLE_WORKFLOW_ID 

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      - run: python --version
      - run:
          name: Install Dependencies
          command: |
            # your code here
            sudo apt update
      - run:
          name: Install AWS CLI
          command: |
            # your code here
            pip install awscli
      - run:
          name: Get backend url for smoke-test
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            # Now the smoke test
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-2.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails, (the goal is to make the job fail initially) 
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: $CIRCLE_WORKFLOW_ID
      - revert-migrations:
          workflow_id: $CIRCLE_WORKFLOW_ID

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      - run: python --version
      - run:
          name: Install Dependencies
          command: |
            # your code here
            sudo apt update
      - run:
          name: Install AWS CLI
          command: |
            # your code here
            pip install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}" 
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: $CIRCLE_WORKFLOW_ID
      - revert-migrations:
          workflow_id: $CIRCLE_WORKFLOW_ID 

  cleanup:
    docker:
      # Docker image here
      - image: ubuntu:18.04
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apt update
            apt install -y python3-pip
            pip3 install awscli
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"     
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
        

workflows:
  default:
    jobs:
      # - print_hello_world:
          # context: my_context
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update] 
